/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "xparameters.h"
#include "xiic.h"
#include "xil_printf.h"
#include "xstatus.h"

#define IIC_DEVICE_ID  XPAR_IIC_0_DEVICE_ID
#define EEPROM_ADDRESS 0x50      // Typical address for 24LC256 EEPROM

#define EEPROM_TEST_ADDR 0x0000  // Address to test in EEPROM
#define TEST_DATA 0x5A           // Test byte to write and read

XIic IicInstance;

int main() {
    u8 WriteBuffer[3];
    u8 ReadBuffer[1];
    int Status;

    xil_printf("I2C EEPROM Test Begin\r\n");

    // Initialize the IIC driver
    Status = XIic_Initialize(&IicInstance, IIC_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        xil_printf("IIC Initialization Failed\r\n");
        return XST_FAILURE;
    }

    // Write sequence for EEPROM (2 address bytes + data)
    WriteBuffer[0] = (EEPROM_TEST_ADDR >> 8) & 0xFF; // MSB address
    WriteBuffer[1] = EEPROM_TEST_ADDR & 0xFF;        // LSB address
    WriteBuffer[2] = TEST_DATA;                      // Data

    Status = XIic_Send(XPAR_IIC_0_BASEADDR, EEPROM_ADDRESS, WriteBuffer, 3, XIIC_STOP);
    if (Status != 3) {
        xil_printf("Write to EEPROM failed\r\n");
        return XST_FAILURE;
    }

    xil_printf("Wrote 0x%02X to address 0x%04X\r\n", TEST_DATA, EEPROM_TEST_ADDR);

    // Wait for the EEPROM to internally write the data (typically ~5ms)
    usleep(5000);

    // Set EEPROM address pointer for reading (send address, then read)
    Status = XIic_Send(XPAR_IIC_0_BASEADDR, EEPROM_ADDRESS, WriteBuffer, 2, XIIC_REPEATED_START);
    if (Status != 2) {
        xil_printf("Failed to set EEPROM address for read\r\n");
        return XST_FAILURE;
    }

    Status = XIic_Recv(XPAR_IIC_0_BASEADDR, EEPROM_ADDRESS, ReadBuffer, 1, XIIC_STOP);
    if (Status != 1) {
        xil_printf("Failed to read from EEPROM\r\n");
        return XST_FAILURE;
    }

    xil_printf("Read Value: 0x%02X\r\n", ReadBuffer[0]);
    if (ReadBuffer[0] == TEST_DATA) {
        xil_printf("EEPROM Test PASSED\r\n");
    } else {
        xil_printf("EEPROM Test FAILED\r\n");
    }

    return 0;
}
