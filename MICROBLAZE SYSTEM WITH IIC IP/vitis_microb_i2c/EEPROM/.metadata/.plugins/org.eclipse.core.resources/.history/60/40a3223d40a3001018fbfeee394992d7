/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */


#include "xparameters.h"
#include "xiic.h"
#include "xil_printf.h"

#define IIC_DEVICE_ID  XPAR_IIC_0_DEVICE_ID
#define EEPROM_ADDRESS 0x50 // EEPROM I2C address

XIic IicInstance;

int I2C_Write_Byte(uint16_t mem_addr, uint8_t data) {
    u8 buffer[3];
    int Status;

    buffer[0] = (mem_addr >> 8) & 0xFF; // MSB address
    buffer[1] = mem_addr & 0xFF;        // LSB address
    buffer[2] = data;

    Status = XIic_Send(XPAR_IIC_0_BASEADDR, EEPROM_ADDRESS, buffer, 3, XIIC_STOP);
    if (Status != 3) {
        xil_printf("I2C Write failed at addr 0x%04X\r\n", mem_addr);
        return -1;
    }
    return 0;
}

int I2C_Read_Byte(uint16_t mem_addr, uint8_t *data) {
    u8 addr_buffer[2];
    int Status;

    addr_buffer[0] = (mem_addr >> 8) & 0xFF; // address MSB
    addr_buffer[1] = mem_addr & 0xFF;        // address LSB

    // Set EEPROM address pointer
    Status = XIic_Send(XPAR_IIC_0_BASEADDR, EEPROM_ADDRESS, addr_buffer, 2, XIIC_REPEATED_START);
    if (Status != 2) {
        xil_printf("Failed to set address for read at 0x%04X\r\n", mem_addr);
        return -1;
    }

    // Read 1 byte
    Status = XIic_Recv(XPAR_IIC_0_BASEADDR, EEPROM_ADDRESS, data, 1, XIIC_STOP);
    if (Status != 1) {
        xil_printf("I2C Read failed at addr 0x%04X\r\n", mem_addr);
        return -1;
    }

    return 0;
}

int main() {
    int Status;
    uint8_t read_data;
    uint16_t test_addr = 0x0000;
    uint8_t test_byte = 0x5A;

    xil_printf("Starting EEPROM Test...\r\n");
    Status = XIic_Initialize(&IicInstance, IIC_DEVICE_ID);
    if (Status != XST_SUCCESS) {
        xil_printf("I2C Initialization Error\r\n");
        return -1;
    }

    // Write data
    if (I2C_Write_Byte(test_addr, test_byte) == 0) {
        xil_printf("Wrote 0x%02X at address 0x%04X\r\n", test_byte, test_addr);
    } else {
        xil_printf("Write Failed\r\n");
        return -1;
    }
    // Small delay for write cycle
    usleep(5000);

    // Read back data
    if (I2C_Read_Byte(test_addr, &read_data) == 0) {
        xil_printf("Read 0x%02X from address 0x%04X\r\n", read_data, test_addr);
        if (read_data == test_byte) {
            xil_printf("EEPROM Test PASSED\r\n");
        } else {
            xil_printf("EEPROM Test FAILED\r\n");
        }
    } else {
        xil_printf("Read failed\r\n");
    }

    return 0;
}

